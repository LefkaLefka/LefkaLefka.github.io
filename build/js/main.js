(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var movement_1 = require("../ts/modules/movement");
var game_1 = require("../ts/modules/game");
var game = new game_1.Game();
new movement_1.Movement(game);
},{"../ts/modules/game":2,"../ts/modules/movement":3}],2:[function(require,module,exports){
"use strict";
var Game = (function () {
    /**
     * Constructor of game, where set main array and players score.
     */
    function Game() {
        this.sizeField = 3;
        // 1 - x, 0 - o, -1 - null.
        this.field = [[0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]];
        this.score = {
            player1: 0,
            player2: 0
        };
        this.startGame();
    }
    Game.prototype.startGame = function () {
        if (Math.random() > 0.5) {
            this.players = {
                player1: "x",
                player2: "o",
            };
            // Player1 start the game.
            this.whoseMove = 0;
        }
        else {
            this.players = {
                player1: "o",
                player2: "x",
            };
            // Player2 start the game.
            this.whoseMove = 1;
        }
        this.countOfMove = 0;
    };
    Game.prototype.check = function () {
        // если есть еще куда ходить
        if (this.countOfMove <= (this.sizeField * this.sizeField)) {
            // если больше 5 ходов
            if (this.countOfMove >= 5) {
                var horizontal = void 0, vertical = void 0, 
                // диагональ вида \
                diagonalL = void 0, 
                // диагональ вида /
                diagonalR = void 0;
                // проверяем на выиграш
                for (var i = 0; i < this.sizeField; ++i) {
                    horizontal = 0;
                    vertical = 0;
                    diagonalL = 0;
                    diagonalR = 0;
                    for (var j = 0; j < this.sizeField; ++j) {
                        // проверяем горизонтали
                        horizontal += this.field[i][j];
                        // проверяем вертикали
                        vertical += this.field[j][i];
                        // диагональ направо
                        diagonalL += this.field[j][j];
                        // диагональ налево
                        diagonalR += this.field[j][this.sizeField - j - 1];
                    }
                    // если в горизонтале насчитали 3 илли -3 возвращаем горизонталь
                    // если в горизонтале нет ничего подобного проверяем вертикаль по такому же принципу
                    // если ничего не нашли проверяем диагональ \
                    // если ничего не нашли проверяем диагональ /
                    // в других случаях(нет выигравшего) возврщаем ноль
                    var temp = Math.abs(horizontal) === this.sizeField ?
                        horizontal : Math.abs(vertical) === this.sizeField ?
                        vertical : Math.abs(diagonalL) === this.sizeField ?
                        diagonalL : Math.abs(diagonalR) === this.sizeField ?
                        diagonalR : 0;
                    // если есть победитель
                    if (temp != 0) {
                        console.log("win");
                        return "sd";
                    }
                }
            }
            // если все походили(клеток на поле не осталось)
            if (this.countOfMove === this.sizeField) {
                console.log("no");
                return false;
            }
        }
    };
    /**
     * Function to handle the move player.
     * @param i Coordinates for x.
     * @param j Coordinates for y.
     * @returns {any} Boolean : false - when cell is busy. String : "o" | "x" - when cell is free.
     */
    Game.prototype.move = function (i, j) {
        if (this.field[i][j] === 0) {
            // Fill the array.
            this.field[i][j] = this.whoseMove === 0 ?
                (this.players.player1 === "x" ? 1 : -1) :
                (this.players.player2 === "x" ? 1 : -1); // Select "x" or "o" for set in array player2 moves
            // Change next player.
            this.whoseMove ^= 1;
            // If we made move increasing counter
            ++this.countOfMove;
            this.check();
            // this.whoseMove === 1 - invert, because we change next player above.
            return this.whoseMove === 1 ? this.players.player1 : this.players.player2;
        }
        else {
            return false;
        }
    };
    return Game;
}());
exports.Game = Game;
},{}],3:[function(require,module,exports){
"use strict";
var Movement = (function () {
    /**
     * Constructor.
     * @param _game Class where defined "game rules".
     */
    function Movement(_game) {
        // u - up, d - down, l - left, r - right, s - set
        //                     u   d   l   r   s
        this.keyCodes = [87, 83, 65, 68, 90,
            38, 40, 37, 39, 48, 96, 45]; // arrow
        this.index = 4;
        this.initElements();
        this.game = _game;
    }
    /**
     * Init element for set event listener.
     */
    Movement.prototype.initElements = function () {
        var _this = this;
        // Init elements.
        this.elements = {
            cells: $("[data-cell]"),
            body: $("body")
        };
        // Set event listener.
        this.elements.cells.each(function (i, el) {
            _this.listenClick(el, _this.click, _this);
        });
        this.listenKeyUp(this.elements.body, this.moving, this);
    };
    /**
     * Set click event listener.
     * @param el Element for set event listener.
     * @param callback Function for processing.
     * @param context Context of "Movement".
     */
    Movement.prototype.listenClick = function (el, callback, context) {
        var _this = this;
        $(el).on("click", function (eventObject) {
            _this.elements.cells.each(function (i, el) {
                if (el === eventObject.target) {
                    callback(i, context, eventObject.target);
                }
            });
        });
    };
    /**
     * Set keyUp event listener.
     * @param el Element for set event listener.
     * @param callback Function for processing.
     * @param context Context of "Movement".
     */
    Movement.prototype.listenKeyUp = function (el, callback, context) {
        $(el).on("keyup", function (e) {
            callback(e.keyCode, context);
        });
    };
    /**
     * When click on element.
     */
    Movement.prototype.click = function (index, context, el) {
        // Find index in array.
        var i = Math.floor(index / context.game.sizeField), j = index - context.game.sizeField * i, 
        // Find result of a player's turn.
        result = context.game.move(i, j);
        // If result correct - show.
        if (result !== false) {
            $(el).text(result);
        }
    };
    /**
     * When move to element.
     * @param keyCode Key code of pressed button.
     */
    Movement.prototype.moving = function (keyCode, context) {
        for (var _i = 0, _a = context.keyCodes; _i < _a.length; _i++) {
            var code = _a[_i];
            if (keyCode === code) {
                // up
                if ((keyCode === 87) || (keyCode === 38)) {
                    context.checkIndex(-3, context);
                }
                // down
                if ((keyCode === 83) || (keyCode === 40)) {
                    context.checkIndex(3, context);
                }
                // left
                if ((keyCode === 65) || (keyCode === 37)) {
                    context.checkIndex(-1, context);
                }
                // right
                if ((keyCode === 68) || (keyCode === 39)) {
                    context.checkIndex(1, context);
                }
                // set
                if ((keyCode === 90) || (keyCode === 48) || (keyCode === 96) || (keyCode === 45)) {
                    // "UnShow" previous element.
                    context.unRender(context.index);
                    // Find index in array.
                    var i = Math.floor(context.index / context.game.sizeField), j = context.index - context.game.sizeField * i, 
                    // Find result of a player's turn.
                    result = context.game.move(i, j);
                    // If result correct - show.
                    if (result !== false) {
                        $(context.elements.cells[context.index]).text(result);
                    }
                    // Set default value.
                    context.index = 4;
                }
                break;
            }
        }
    };
    /**
     * Check index
     * @param shift The number of shifts.
     * @param context Context of "Movement".
     */
    Movement.prototype.checkIndex = function (shift, context) {
        // If index is within the bounds [0..8] - 9 elements.
        if (context.index + shift < 9 && context.index + shift >= 0) {
            // "UnShow" previous selected element.
            context.unRender(context.index);
            // Find new index.
            context.index += shift;
            // Show new element.
            context.render(context.index);
        }
    };
    /**
     * Show element with index.
     * @param index Index of showing element.
     */
    Movement.prototype.render = function (index) {
        $(this.elements.cells[index]).addClass("selected");
    };
    /**
     * "UnShow" element with index.
     * @param index Index of showing element.
     */
    Movement.prototype.unRender = function (index) {
        $(this.elements.cells[index]).removeClass("selected");
    };
    return Movement;
}());
exports.Movement = Movement;
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
